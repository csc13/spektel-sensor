<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">spektel-sensor</title>
<subtitle type="text">Spektrum capacity sensor</subtitle>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2014-12-24T16:13:01+01:00</updated>
<id>/</id>
<author>
  <name>Christian</name>
  <uri>/</uri>
  <email>git@cescholz.de</email>
</author>


<entry>
  <title type="html"><![CDATA[Firmware Part 1]]></title>
  <link rel="alternate" type="text/html" href="/articles/Software_part_1" />
  <id>/articles/Software_part_1</id>
  <published>2014-12-23T00:00:00+01:00</published>
  <updated>2014-12-23T00:00:00+01:00</updated>
  <author>
    <name>Christian</name>
    <uri></uri>
    <email>git@cescholz.de</email>
  </author>
  <content type="html">&lt;p&gt;After the board is assembled and working it is time to move to the software part. As
mentioned earlier, most of the magic is in the code. This post is intended to help to
understand the source code of the sensor firmware.&lt;/p&gt;

&lt;p&gt;This is not a C or Atmel Studio tutorial. It will suite programmers, who know basic C (or
C style programming) and move to the XMEGA development. Although the Atmel datasheet is our
friend and the basis of the code I will not go into the XMEGA details.
I’m just not expert enough up to now to do so.&lt;/p&gt;

&lt;h3 id=&quot;testing-the-board&quot;&gt;Testing the board&lt;/h3&gt;
&lt;p&gt;The “Hello world!” in the µC world is a blink. The board has two LEDs to do some blinking
and see if the code uploads without problem. Whenever you get stuck it’s time to reassure
the basic functions. A Todo would be to provide some basic testing code. Maybe by pressing
the button, the sensor can run some test, blink the LEDs, send some test data to the transmitter.&lt;/p&gt;

&lt;h3 id=&quot;development-process&quot;&gt;Development process&lt;/h3&gt;
&lt;p&gt;I use the Atmel studio 6 with the ASF framework. The ASF wizard helps to specify the
required libraries based on the cpu modules and functions you want to use. By setting up 
the right device (the ATXMEGA32E5) and a custom board it selects the correct pin and register
definitions.
After writing the code, it needs to be compiled in an .elf file containing the machine code.
Using the programming tool in AVR Studio the flash memory gets erased and rewritten. The
µC resets and starts to run the new code.&lt;/p&gt;

&lt;p&gt;A debugger seems very useful, but I didn’t use it much. In most environments a debugger
affects the runtime, at least it corrupts the timing. I don’t know the effects for
XMEGA debugging at the moment.&lt;/p&gt;

&lt;h3 id=&quot;basic-architecture-of-the-firmware&quot;&gt;Basic architecture of the firmware&lt;/h3&gt;
&lt;p&gt;The software consist of three main blocks:&lt;/p&gt;

&lt;p&gt;A.) The classic &lt;code&gt;while(1){...}&lt;/code&gt; in the &lt;code&gt;main()&lt;/code&gt; function doing most of the calculation. After
entering the infinit while loop the &lt;code&gt;sleepmanager&lt;/code&gt;is called and goes to sleep, until it
gets a wake up call by block B (an additional global variable is used to assure only block B
can trigger main measurement). The calculated measurements are written to block C.&lt;/p&gt;

&lt;p&gt;B.) A timer to trigger the main ADC measuring the current using the Allegro hall sensor.
The ADC is coupled to the timer by the event system. After the measurement is finished, an
interrupt is fired reading the result und waking up block A from the sleep mode.&lt;/p&gt;

&lt;p&gt;C.) This block serves the X-Bus requests from the Spektrum TM1000 telemetry module. This
block is triggered by a TWI/I2C interrupt and just uses the values provided by block B 
and transmits them to the telemetry module.&lt;/p&gt;

&lt;p&gt;So we have two interrupt sources, the main measurement timer and the X-Bus interrupts. The
first triggers the measurements and calculations. The X-Bus trigger grabs the data and
sends it out. Now we go through the programm flow starting with the timer trigger of block
B. &lt;/p&gt;

&lt;h3 id=&quot;triggered-by-a-timer&quot;&gt;Triggered by a timer&lt;/h3&gt;
&lt;p&gt;A timer is a module, which can fire events after a defined number of clock cycle counts 
or when the counter register gets an overflow. The XMEGA can be clocked up to 32MHz, this
are 32 million counts per second, if not using any prescaler. A prescaler can divide the
clock rate by a binary factor (2,4,8,16, etc.) for longer intervals. By counting the 
overflows in a second register timers can be used for longer times, than the overflow time.&lt;/p&gt;

&lt;p&gt;The basic trigger of the sensor is a timer at 25 or 50Hz firing an event every 40 or 20ms.
Both settings work without problems. To get the right time, many parameters needs to be
considered. If the time is to long, the measurement may be to rough for a good capacity
calculation. If the time is to short, the ADC measurement and calculations may be interrupted
by the next cycle. ADCs need some time for precise results. The &lt;code&gt;tc_init()&lt;/code&gt; function
initializes the timer with 3 interrupts. The &lt;code&gt;error_interrupt&lt;/code&gt; catches errors in the timer
system and lights the red LED. the &lt;code&gt;overflow_interrupt&lt;/code&gt; restarts the timer. The &lt;code&gt;cca_interrupt&lt;/code&gt;
is the one we are interested in this case. It is set to fire at half the timer period. Maybe
for clarity I could have changed the code to just use the &lt;code&gt;overflow_interrupt&lt;/code&gt;. This would
have the same effect in this case. &lt;/p&gt;

&lt;p&gt;The timer event is used to trigger the event system. By using the event system of the XMEGA
events like the start of an ADC measurement can be started. So more than one event can be
triggered by one interrupt and it gives additional flexibility. It’s not necessary in this
code, but I used it nevertheless. The following lines configure the event system:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; EVSYS.CH3MUX = EVSYS_CHMUX_TCC4_CCA_gc;  //Connect TCC4 Compare interrupt to event channel 3 (used to trigger ADC)
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; tc45_set_resolution(&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;TIMER_SENS, TIMER_SENS_RESOLUTION);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Please note&lt;/strong&gt;, that several config files, typically named &lt;code&gt;conf/&amp;lt;modulname&amp;gt;_config.h&lt;/code&gt; are used
to parameterize the modules on startup. These are used by the modules init functions.&lt;/p&gt;

&lt;h3 id=&quot;analog-digital-converter&quot;&gt;Analog-Digital-Converter&lt;/h3&gt;
&lt;p&gt;The heart of the sensor is the Allegro hall sensor converting a current up to 100 Amps (or
even up to 200A with another version) to an almost linear voltage and the XMEGA analog to
digital converter. The XMEGA ADC can convert a voltage range between GND and around 2V to
a 12Bit value in single-ended unsigned mode. This will be reduced by using a signed mode
(for negative voltages) or an external voltage reverence. Using the 12Bit the least 
significant bit represents 0.4899mV.&lt;/p&gt;

&lt;p&gt;The Allegro outputs 396 to 410 mV by 0mA current up to nearly 3.1V at 100A. So we have 
to transfer this range to the max of 2.048V of the external voltage reference or the internal
voltage reference of Vcc/1.6 = 2.063V. This is done by a voltage divider of 3K to 4.7K Ohm.&lt;/p&gt;

&lt;p&gt;The ADC gets initialized in &lt;code&gt;adc_init()&lt;/code&gt;. There is the ADC port and an ADC channel. The used
XMEGA has only one ADC port and one channel. Multiple channels would allow for parallel
measurements. This would have been nice for measuring the current and voltage simultaneously.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Setting up the ADC:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; adc_set_conversion_parameters(&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;adc_conf, ADC_SIGN_OFF,ADC_RES_MT12 , ADC_REF_VCC);  // ADC_RES_12&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sets the unsigned mode with 12Bit resolution and the internal Vcc as VREF.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; adc_set_conversion_trigger(&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;adc_conf, ADC_TRIG_EVENT_SYNCSWEEP,1, 3 );
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; adc_set_clock_rate(&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;adc_conf, ADC_CLOCK); // ADC clock 1.8MHz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sets the trigger to an event and specifies the ADC clock rate. Higher clock rates allow for
faster measurements, slower is more precise. I use a fast setting to be save.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; adc_set_callback(&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;ADC_MAIN, *adc_cur_callback);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Callback function called when the measurement is finished. The time of a measurement is 
calculated by the number of result bits (at least one clock cycle per bit) and some time 
to transfer the result to the result register.  &lt;/p&gt;

&lt;p&gt;To use different pins for ADC probes, the ADC channnel needs to be reconfigured. So there
are two functions to set up the channel. The &lt;code&gt;adcch_set_cur_measure()&lt;/code&gt; for current and
&lt;code&gt;adcch_set_volt_measure()&lt;/code&gt; for the main battery voltage measurement. The difference is, that
the current measurement works with an interrupt firing after the result is there, while
the voltage measurement gets started and then checked (blocking in a while loop) for the
result.&lt;/p&gt;

&lt;p&gt;Setting up the ADC channel:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; adcch_set_input(&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;adcch_conf, ADC_MAIN_CURRENT_PIN, ADCCH_NEG_NONE, 1);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This sets the pin for measuring, the negative pin which is not used here and gain (not used here).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; adcch_enable_averaging(&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;adcch_conf, ADC_CUR_AVERAG_SAMP);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I enabled the averaging function of the XMEGA32E5 taking 4 samples and returning the average
of these.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; adcch_set_interrupt_mode(&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;adcch_conf, ADCCH_MODE_COMPLETE); //complete conversion
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; adcch_enable_interrupt(&lt;span class=&quot;ni&quot;&gt;&amp;amp;adcch_conf);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Configures the channel interrupt to fire when the analog to digital conversion is completed.
The callback function is taken from the ADC setup.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The callback function&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If the ADC conversion is completed, the callback function is called:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; static void adc_cur_callback(ADC_t *adc, uint8_t ch_mask, adc_result_t res) {
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; 	cur_mea_val = res;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; 	act = !act;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; 	time[act] = rtc_get_time();
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; 	
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; 	measure_cycle = true;	
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since this XMEGA provides only one channel, the channel mask parameter will alway be the same.
The result is saved to the &lt;code&gt;cur_mea_val&lt;/code&gt; global variable. Then the actual time is saved
to &lt;code&gt;time[act]&lt;/code&gt;. This is switched each measure cycle to have the actual and latest measurement
time for the capacity calculation. The measure_cycle = true is set to signalize the main
loop that a new result is available.&lt;/p&gt;

&lt;p&gt;I will cover the main calculations in the next part!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/Software_part_1&quot;&gt;Firmware Part 1&lt;/a&gt; was originally published by Christian at &lt;a href=&quot;&quot;&gt;spektel-sensor&lt;/a&gt; on December 23, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Hardware assembly]]></title>
  <link rel="alternate" type="text/html" href="/articles/Hardware_assembly" />
  <id>/articles/Hardware_assembly</id>
  <published>2014-12-22T00:00:00+01:00</published>
  <updated>2014-12-22T00:00:00+01:00</updated>
  <author>
    <name>Christian</name>
    <uri></uri>
    <email>git@cescholz.de</email>
  </author>
  <content type="html">&lt;p&gt;After a while the REV_B PCBs arrived. So I instantly started to assemble the board. I will 
give you some insight in the process of the Surface Mount Technology (SMT) and tools I use.
Then there where some pitfalls and workarounds I will show. &lt;/p&gt;

&lt;h3 id=&quot;shrinking-the-board&quot;&gt;Shrinking the board&lt;/h3&gt;
&lt;p&gt;Remember, that I am still quite new to the surface mount devices. From REV_A to REV_B I 
changed all passive components from the 1206 to the 0603 package format. There are 
imperial (inch) and metric (mm) size form factors. Unfortunately the 0603 exists in both. In
inch it is 1.6mm long and 0.8mm wide. After some practice, I could handle this size, although the 
1206 inch size with its length of 3.2mm and width of 1.6mm is a bit easier to handle. By
mistake I ordered a few hundred metric 0603 (an imperial 0201) capacitors. These are 
0.6mm long and 0.3 mm wide. I guess it is nearly impossible to solder them reliable using
a solder iron. Find a overview on the sizes &lt;a href=&quot;http://http://en.wikipedia.org/wiki/Surface-mount_technology&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-tooling&quot;&gt;The tooling&lt;/h3&gt;
&lt;p&gt;I wanted to shrink the board and still use small and simple tools for the assembly. I don’t
have the room for a reflow oven and all that stuff.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is my basic toolset:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Good SMT tweezers (look for anti-magnetic, anti-static good quality)&lt;/li&gt;
  &lt;li&gt;Soldering iron with 0.8mm flat tip (I use a analog regulated 80W station)&lt;/li&gt;
  &lt;li&gt;Solder wick 1mm width&lt;/li&gt;
  &lt;li&gt;Leaded solder in 0.5mm diameter&lt;/li&gt;
  &lt;li&gt;Flux pen dispenser&lt;/li&gt;
  &lt;li&gt;Magnifying lens 15x&lt;/li&gt;
  &lt;li&gt;Clockmaker magnifying lens cap&lt;/li&gt;
  &lt;li&gt;0.4 mm tinned copper wire (mainly for the vias)&lt;/li&gt;
  &lt;li&gt;Wire cutter (not used for SMT)&lt;/li&gt;
  &lt;li&gt;Ohmmeter with connection tester&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/SMT_toolset.jpg&quot; /&gt;
	&lt;figcaption&gt;SMT Toolset&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I wear the clockmaker magnifying lens with low magnification, because for soldering I don’t need
to see all the details. I flux the pads and tin one pad. The pad doesn’t need to be 
completely covered. Then I hold the SMD component with the tweezers and touch the component
pin and pad with the solder tip by putting the flat part on the pad. Because of the small
component and pad it takes only one to two seconds to see the solder flow. I use 320 to 400°C
for soldering. If one pad is a ground pad with a some connections to larger PCB areas it may
take a little longer to solder. Take your time, I didn’t burn a part up to now.&lt;/p&gt;

&lt;p&gt;Larger components like the XMEGA can be soldered the same way. Fix one pin, then another 
one on the oposite edge. After that the pins can be soldered one by one.&lt;/p&gt;

&lt;p&gt;Then I use the 15x magnifying lens with some light (holding the PCB against a lamp can help
as long as there are no big components mounted) to check for good solder and no unwanted shortcuts.
If there is a shortcut, don’t panic. Flux the area, put a fresh end of the solder wick on
the tinned part and the solder iron tip on top. The wick will soak up the solder.&lt;/p&gt;

&lt;p&gt;An Ohmmeter with a connection tester is a good companion. My multimeter has a mode, in 
which it will beep, if there is a connection. So I don’t need to look up to see if there is 
a wanted or unwanted connection. Test for the wanted connections and unwanted ones.&lt;/p&gt;

&lt;p&gt;After soldering the board I needed some time to find out unwanted connections like Ground
to Vcc and many more.&lt;/p&gt;

&lt;p&gt;A great tip I found very useful is to fix the SMD belts on a small board using double sided
duct tape. I wrote the values on the stripes. So everything is sorted and fixed.&lt;/p&gt;

&lt;h3 id=&quot;assembly-time&quot;&gt;Assembly time!&lt;/h3&gt;
&lt;p&gt;I ordered the board etched, tinned and drilled. So there are no connected vias and no 
solder or print masks. So first I removed all layers expect the routes, vias and components 
with their names in Eagle PCB to create a plan for assembling. You will find these assembly 
plans in the Github repository in the hardware REV_B folder. I printed these in A4 and 
marked the parts values by hand on it.&lt;/p&gt;

&lt;p&gt;The drill mask for the Allegro hall sensor big pins is incomplete. So I used a drill to
create the long holes needed. To connect the vias, I laid the board on a flat surface,
put 0.4mm tinned copper wire trough the holes and cut 2mm above. After 4 - 8 vias, I apply
flux and solder them. After all the other side can be soldered and the exzessive wire
cut away.&lt;/p&gt;

&lt;p&gt;Then I soldered the components on the top side (the µC side). I started with the small 
components inside out. Be aware, that diodes are polarized and get the direction right. 
The have a point or stripe on the minus pin. See the result on the next picture:&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/Assembled_REV_B_top.jpg&quot; /&gt;
	&lt;figcaption&gt;Assembled REV_B top side&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The Allegro current pins are not soldered yet.&lt;/p&gt;

&lt;p&gt;In the B revision I tried to avoid using pins as vias, since it is difficult to solder a 
pin header from its top. But it is necessary in two cases as shown in the errata later on.
The bottom side is much easier, because the two pin headers, two X-Bus connectors, the
Allegro sensor and button take almost all of the space.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/Assembled_REV_B_bottom.jpg&quot; /&gt;
	&lt;figcaption&gt;Assembled REV_B bottom side&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;errata&quot;&gt;Errata&lt;/h3&gt;
&lt;p&gt;Again, there are some small faults on the board. Or at least things to optimize. I put
the connectors on the bottom side, so that most of the soldering can be made on the top side only.
The ground pin of the X-Bus ZH connectors needs to be connected to the bottom side.
At least the angled connector can be soldered more easy than the straight one. &lt;em&gt;Make sure
to solder this before assembling the straight connector&lt;/em&gt;. If you only use this sensor,
only one connector is needed anyway.&lt;/p&gt;

&lt;p&gt;Second, the ground pin of the Serial connector needs to be connected to the bottom plate.
I used an exacto knife to remove the plastic around the pin. With lots of flux the pin then
can be soldered.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/Assembled_REV_B_bottom_errata.jpg&quot; /&gt;
	&lt;figcaption&gt;Assembled REV_B bottom side&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;outlook&quot;&gt;Outlook&lt;/h3&gt;
&lt;p&gt;In future versions, a small capacitor at the Allegro signal pin can serve as a hardware 
low pass filter (thanks to Ingo on the rc-heli.de forum). Additional cell voltage measurements
would be nice as well.  &lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;/articles/Hardware_assembly&quot;&gt;Hardware assembly&lt;/a&gt; was originally published by Christian at &lt;a href=&quot;&quot;&gt;spektel-sensor&lt;/a&gt; on December 22, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[XMEGA32E5]]></title>
  <link rel="alternate" type="text/html" href="/articles/xmega" />
  <id>/articles/xmega</id>
  <published>2014-11-26T00:00:00+01:00</published>
  <updated>2014-11-26T00:00:00+01:00</updated>
  <author>
    <name>Christian</name>
    <uri></uri>
    <email>git@cescholz.de</email>
  </author>
  <content type="html">&lt;p&gt;Some may ask, why I have chosen the XMEGA32E5 for the project. Here is why, or at least
why at the end I used it.&lt;/p&gt;

&lt;h3 id=&quot;why-the-xmega&quot;&gt;Why the XMEGA?&lt;/h3&gt;
&lt;p&gt;Arduino is a great starting point for microcontroller beginners. Its widely available, 
has boards for easy assembling, a nice IDE and libraries for abstraction. And it’s all 
open source and low priced. So I started with the ATMEGA family going to straight 
AVR GCC programming using an ATTINY. Seeing Schorsch’s project on the RC-Heli 
&lt;a href=&quot;http://www.rc-heli.de/board/showthread.php?t=190165&quot;&gt;thread&lt;/a&gt; using the XMEGA with 
some features got my attention. The upgrade from the ATMEGA shouldn’t be that difficult.&lt;/p&gt;

&lt;h3 id=&quot;atmega-vs-xmega&quot;&gt;ATMEGA vs. XMEGA&lt;/h3&gt;
&lt;p&gt;The XMEGA32E5 comes in a small TQFP package. I was looking for a SMD package, since it 
reduces the overall project footprint. It brings a 12 Bit Analog-Digital-Converter 
and a event-system. There are two I2C ports, one as an I2C Slave and one as an I2C Master. 
The slave port is used for the connection to the Spektrum-RC, the master port for the BMP180 
pressure sensor. The XMEGA has a 32MHz clock rate compared to the 16MHz of the ATMEGA328.&lt;/p&gt;

&lt;p&gt;Being quite new to micros I didn’t expect much differences. 
But there are some. First, the XMEGA uses 3.3V and can not be operated using 5V. 
So all components should work with 3.3V too. Next the XMEGA uses PDI instead of ISP for 
programming the device. So I needed a dedicated programmer, since the Bootloader/USB 
method of the Arduino doesn’t work. I used the Arduino as an ISP for the ATTINY, which 
doesn’t work as well. Eventually I got a small cheap AVRISP clone based on an Atmel 
chip. But the Jungo USB drivers are not compatible to the Mac. So I switched to Windows, the 
Atmel AVR Studio and the ASF a development framework. To test this it is handy to have 
a XMEGA breakout board for testing.&lt;/p&gt;

&lt;h3 id=&quot;some-words-on-developing-on-mac-osx&quot;&gt;Some words on developing on Mac OsX&lt;/h3&gt;
&lt;p&gt;Using a Mac is no problem in most cases. A lot of Linux software is easily usable. There is
a AVR GCC toolchain and avrdude version at the Atmel website. Using a 
programmer with the FTDI USB chip (like the Arduinos use) is also no problem. 
But both, the cheap AVR ISP mkII clone as well as an Atmel JTAG ICE mkII didn’t work with
Mac OsX, since there is no Mac driver for the used Atmel USB chip. And I couldn’t get the
libusb running. At the end I switched to Windows 8.1 in a Parallels VM. With this I
use the AVR Studio 6.x. This is not that fast on my Mac Book Air (2010), but works.
I like the GCC toolchain, because it’s lightweight, but the AVR Studio is much more easy to use.&lt;/p&gt;

&lt;h3 id=&quot;using-the-atmel-avr-studio-and-asf&quot;&gt;Using the Atmel AVR Studio and ASF&lt;/h3&gt;
&lt;p&gt;The AVR Studio and ASF makes it easy to setup the device specific parts of a project.
Just select the microcontroller and modules (like ADC, Timer, etc.) used 
in the project, the programming tool and board if using a standard Atmel board.
The IDE and ASF takes care of including the required libraries and tools. 
The ASF works, but not always as expected. Maybe I will write on this later on.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;The change from the ATMEGA to XMEGA was quite painful, since I changed the complete development
tool chain. This was the case, since I use a Mac and the programmer hardware does not supporte Mac OsX.&lt;/p&gt;

&lt;p&gt;Beside this it is quite different to program using Arduino, the Atmel AFS or pure C. I didn’t
test the XMEGA Arduino port, but I will keep using Arduino for fast prototyping with the
ATMEGA. At the moment I will stay with the AVR Studio and AFS for the more complex projects.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;/articles/xmega&quot;&gt;XMEGA32E5&lt;/a&gt; was originally published by Christian at &lt;a href=&quot;&quot;&gt;spektel-sensor&lt;/a&gt; on November 26, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[New Revision_B board ready]]></title>
  <link rel="alternate" type="text/html" href="/articles/new_rev_b" />
  <id>/articles/new_rev_b</id>
  <published>2014-11-23T00:00:00+01:00</published>
  <updated>2014-11-23T00:00:00+01:00</updated>
  <author>
    <name>Christian</name>
    <uri></uri>
    <email>git@cescholz.de</email>
  </author>
  <content type="html">&lt;p&gt;The &lt;code&gt;REV_A&lt;/code&gt; sensor worked and the last capacity measurements were within 3% of the loaded capacity.
So thinks were working fine. But the REV_A board had a major bug on the footprint of the
BMP180 pressure sensor I want to use for the Vario and Altimeter functions. So I tried to 
fix it with the solder iron. At the end I bricked it. One of the PDI lines goes under the
microcontroller and this was the one having a short connection to the ground.&lt;/p&gt;

&lt;p&gt;Since I proved everything possible with &lt;code&gt;REV_A&lt;/code&gt; I went on and designed &lt;code&gt;REV_B&lt;/code&gt;. It’s on
&lt;a href=&quot;https://github.com/csc13/spektel-sensor/tree/master/hardware/REV_B&quot;&gt;GitHub&lt;/a&gt; right now.&lt;/p&gt;

&lt;h3 id=&quot;news-in-revb&quot;&gt;News in REV_B&lt;/h3&gt;

&lt;p&gt;There are some new features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A button for programming&lt;/li&gt;
  &lt;li&gt;A voltage reverence of 2048mV to the AREF pin of the XMEGA&lt;/li&gt;
  &lt;li&gt;Some &lt;strong&gt;Ferrite Chip Beads&lt;/strong&gt; and some small capacities at the IC VCC pins for steady working power&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And it has a much smaller footprint of a board size under 35x35mm! So most components have
the 0603 SMD package. This will be a challenge for the soldering I plan to do by hand.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;/articles/new_rev_b&quot;&gt;New Revision_B board ready&lt;/a&gt; was originally published by Christian at &lt;a href=&quot;&quot;&gt;spektel-sensor&lt;/a&gt; on November 23, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Adding Processing support]]></title>
  <link rel="alternate" type="text/html" href="/articles/Adding_Processing_Support" />
  <id>/articles/Adding_Processing_Support</id>
  <published>2014-11-02T00:00:00+01:00</published>
  <updated>2014-11-02T00:00:00+01:00</updated>
  <author>
    <name>Christian</name>
    <uri></uri>
    <email>git@cescholz.de</email>
  </author>
  <content type="html">&lt;h4 id=&quot;added-support-for-realtimeplotter-and-arduplot&quot;&gt;2014-11-02: Added support for RealtimePlotter and arduplot&lt;/h4&gt;
&lt;p&gt;I learned, that the main part on building a sensor is the software to grind and polish the
signals read from the hardware sensor. In this case it was the Allegro ACS758LCB-100U hall 
effect current sensor.&lt;/p&gt;

&lt;p&gt;So I read about digital filtering and use 3 cascaded the &lt;code&gt;Moving Average&lt;/code&gt; algorithm to smooth the
sensor reading.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; //filter use in main.c
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; AddToFloatAvg(&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;cur_filter1, (cur_mea_val));
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; AddToFloatAvg(&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;cur_filter2, GetOutputValue(&lt;span class=&quot;ni&quot;&gt;&amp;amp;cur_filter1));&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; AddToFloatAvg(&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;cur_filter3, GetOutputValue(&lt;span class=&quot;ni&quot;&gt;&amp;amp;cur_filter2));&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; cur_adc_res[act] = (GetOutputValue(&lt;span class=&quot;ni&quot;&gt;&amp;amp;cur_filter3));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Each filter has 9 readings. For details see &lt;code&gt;src/floating_average.h&lt;/code&gt; and &lt;code&gt;.c&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;By testing I used the DX9 transmitter, recorded to the SD card and read that using the TLM Reader.
This was a long procedure. Since I already put a header with the Rx, Tx serial pins on the
board it shouldn’t be that much of a problem to show some output on the Mac using the Processing
tools.&lt;/p&gt;

&lt;p&gt;I found two great serial monitors based on &lt;a href=&quot;https://www.processing.org/&quot;&gt;Processing&lt;/a&gt;.
Please see the &lt;a href=&quot;https://github.com/sebnil/RealtimePlotter.git&quot;&gt;RealtimePlotter&lt;/a&gt; and 
&lt;a href=&quot;https://github.com/dahart/arduplot.git&quot;&gt;Arduplot&lt;/a&gt;. Thanks to their contributors. Just uncomment
the lines in the &lt;code&gt;config/conf_board.h&lt;/code&gt; file.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/Adding_Processing_Support&quot;&gt;Adding Processing support&lt;/a&gt; was originally published by Christian at &lt;a href=&quot;&quot;&gt;spektel-sensor&lt;/a&gt; on November 02, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[First test flight]]></title>
  <link rel="alternate" type="text/html" href="/articles/test-flight-log" />
  <id>/articles/test-flight-log</id>
  <published>2014-10-29T00:00:00+01:00</published>
  <updated>2014-10-29T00:00:00+01:00</updated>
  <author>
    <name>Christian</name>
    <uri></uri>
    <email>git@cescholz.de</email>
  </author>
  <content type="html">&lt;p&gt;This was one of the first flights using the sensor in it’s target environment, the T-REX 500 RC
heli. I did a lot of bench testing using a light bulb up to 3A. But nor the bulb or the power
supply could have done much more. So this was the first test with more Amps.&lt;/p&gt;

&lt;p&gt;I’m using a Spektrum DX9 transmitter with SD card slot. I use the TLM Reader. Here is the result:&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/TREX500_20141026_REVA.png&quot; /&gt;
	&lt;figcaption&gt;T-REX 500 flight log&lt;/figcaption&gt;
&lt;/figure&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/test-flight-log&quot;&gt;First test flight&lt;/a&gt; was originally published by Christian at &lt;a href=&quot;&quot;&gt;spektel-sensor&lt;/a&gt; on October 29, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Initial Upload]]></title>
  <link rel="alternate" type="text/html" href="/Initial%20upload" />
  <id>/Initial upload</id>
  <published>2014-10-28T00:00:00+01:00</published>
  <updated>2014-10-28T00:00:00+01:00</updated>
  <author>
    <name>Christian</name>
    <uri></uri>
    <email>git@cescholz.de</email>
  </author>
  <content type="html">&lt;p&gt;The prototype of the spektel-sensor passed its first successful tests. The revision A layout
and corresponding code is up on &lt;a href=&quot;https://github.com/csc13/spektel-sensor.git&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please be aware, that &lt;code&gt;REV_A&lt;/code&gt; had several faults on the board. So the Bosch BMP180 sensor
won’t work, because I didn’t read the datasheet correctly.&lt;/p&gt;

&lt;p&gt;After learning Eagle PCB, a software I can recommend to everybody, I spend some nights to
find the Eagle libraries for the parts I wanted to use and create the layout. At the end
I was little impatient to order the PCB (printed circuite board) at a board manufacturer.
I chose a little one, who did a great job etching and drilling the board.&lt;/p&gt;

&lt;p&gt;But I found several bugs in the layout. So I used a exacto hobby knife, some lacquered copper
wire and fixed it. As a mostly software guy I had to learn that a hardware bug can’t be fixed that
fast. And ordering a new board takes some days and money. so in the future I will print the board
layout on paper and go through all components and wires.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/Initial%20upload&quot;&gt;Initial Upload&lt;/a&gt; was originally published by Christian at &lt;a href=&quot;&quot;&gt;spektel-sensor&lt;/a&gt; on October 28, 2014.&lt;/p&gt;</content>
</entry>

</feed>