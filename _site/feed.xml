<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">spektel-sensor</title>
<subtitle type="text">Spektrum capacity sensor</subtitle>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2014-11-27T01:19:17+01:00</updated>
<id>/</id>
<author>
  <name>Christian</name>
  <uri>/</uri>
  <email>git@cescholz.de</email>
</author>


<entry>
  <title type="html"><![CDATA[XMEGA32E5]]></title>
  <link rel="alternate" type="text/html" href="/articles/xmega" />
  <id>/articles/xmega</id>
  <published>2014-11-26T00:00:00+01:00</published>
  <updated>2014-11-26T00:00:00+01:00</updated>
  <author>
    <name>Christian</name>
    <uri></uri>
    <email>git@cescholz.de</email>
  </author>
  <content type="html">&lt;p&gt;Some may ask, why I have chosen the XMEGA32E5 for the project. Here is why, or at least
why at the end I used it.&lt;/p&gt;

&lt;h3 id=&quot;why-the-xmega&quot;&gt;Why the XMEGA?&lt;/h3&gt;
&lt;p&gt;Arduino is a great starting point for microcontroller beginners. Its widely available, 
has boards for easy assembling, a nice IDE and libraries for abstraction. And it’s all 
open source and low priced. So I started with the ATMEGA family going to straight 
AVR GCC programming using an ATTINY. Seeing Schorsch’s project on the RC-Heli 
&lt;a href=&quot;http://www.rc-heli.de/board/showthread.php?t=190165&quot;&gt;thread&lt;/a&gt; I saw the XMEGA with 
some features. The upgrade from the ATMEGA shouldn’t be that difficult.&lt;/p&gt;

&lt;h3 id=&quot;atmega-vs-xmega&quot;&gt;ATMEGA vs. XMEGA&lt;/h3&gt;
&lt;p&gt;The XMEGA32E5 comes in a small TQFP package. I was looking for a SMD package, since it 
reduces the overall project footprint. It brings a 12 Bit Analog-Digital-Converter 
and a event-system. There are two I2C ports, one as an I2C Slave and one as an I2C Master. 
The slave port is used for the connection to the Spektrum-RC, the master port for the BMP180 
pressure sensor. The XMEGA has a 32MHz clock rate compared to the 16MHz of the ATMEGA328.&lt;/p&gt;

&lt;p&gt;Being quite new to micros I didn’t expect much differences. 
But there are some. First, the XMEGA uses 3.3V and can not be operated using 5V. 
So all components should work with 3.3V too. Next the XMEGA uses PDI instead of ISP for 
programming the device. So I needed a dedicated programmer, since the Bootloader/USB 
method of the Arduino doesn’t work. I used the Arduino as an ISP for the ATTINY, which 
doesn’t work as well. Eventually I got a small cheap AVRISP clone based on an Atmel 
chip. But the Jungo USB drivers are not compatible to the Mac. So I switched to Windows, the 
Atmel AVR Studio and the ASF a development framework. To test this it is handy to have 
a XMEGA breakout board for testing.&lt;/p&gt;

&lt;h3 id=&quot;some-words-on-developing-on-mac-osx&quot;&gt;Some words on developing on Mac OsX&lt;/h3&gt;
&lt;p&gt;Using a Mac is no problem in most cases. A lot of Linux software is easily usable. There is
a AVR GCC toolchain and avrdude version at the Atmel website. Using a 
programmer with the FTDI USB chip (like the Arduinos use) is also no problem. 
But both, the cheap AVR ISP mkII clone as well as an Atmel JTAG ICE mkII didn’t work with
Mac OsX, since there is no Mac driver for the used Atmel USB chip. And I couldn’t get the
libusb running. At the end I switched to Windows 8.1 in a Parallels VM. With this I
use the AVR Studio 6.x. This is not that fast on my Mac Book Air (2010), but works.
I like the GCC toolchain, because it’s lightweight, but the AVR Studio is much more easy to use.&lt;/p&gt;

&lt;h3 id=&quot;some-words-on-avr-studio-and-asf&quot;&gt;Some words on AVR Studio and ASF&lt;/h3&gt;
&lt;p&gt;The AVR Studio and ASF makes it easy to setup the device specific parts of a project.
Just select the microcontroller and modules (like ADC, Timer, etc.) used 
in the project, the programming tool and board if using a standard Atmel board.
The IDE and ASF takes care of including the required libraries and tools. 
The ASF works, but not always as expected. Maybe I will write on this later on.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;The change from the ATMEGA to XMEGA was quite painful, since I changed the complete development
tool chain. This was the case, since I use a Mac and the programmer hardware does not supporte Mac OsX.&lt;/p&gt;

&lt;p&gt;Beside this it is quite different to program using Arduino, the Atmel AFS or pure C. I didn’t
test the XMEGA Arduino port, but I will keep using Arduino for fast prototyping with the
ATMEGA. At the moment I will stay with the AVR Studio and AFS for the more complex projects.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;/articles/xmega&quot;&gt;XMEGA32E5&lt;/a&gt; was originally published by Christian at &lt;a href=&quot;&quot;&gt;spektel-sensor&lt;/a&gt; on November 26, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[New Revision_B board ready]]></title>
  <link rel="alternate" type="text/html" href="/articles/new_rev_b" />
  <id>/articles/new_rev_b</id>
  <published>2014-11-23T00:00:00+01:00</published>
  <updated>2014-11-23T00:00:00+01:00</updated>
  <author>
    <name>Christian</name>
    <uri></uri>
    <email>git@cescholz.de</email>
  </author>
  <content type="html">&lt;p&gt;The &lt;code&gt;REV_A&lt;/code&gt; sensor worked and the last capacity measurements were within 3% of the loaded capacity.
So thinks were working fine. But the REV_A board had a major bug on the footprint of the
BMP180 pressure sensor I want to use for the Vario and Altimeter functions. So I tried to 
fix it with the solder iron. At the end I bricked it. One of the PDI lines goes under the
microcontroller and this was the one having a short connection to the ground.&lt;/p&gt;

&lt;p&gt;Since I proved everything possible with &lt;code&gt;REV_A&lt;/code&gt; I went on and designed &lt;code&gt;REV_B&lt;/code&gt;. It’s on
&lt;a href=&quot;https://github.com/csc13/spektel-sensor/tree/master/hardware/REV_B&quot;&gt;GitHub&lt;/a&gt; right now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE: The REV_B is not yet tested. So I don’t know if it works!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;news-in-revb&quot;&gt;News in REV_B&lt;/h3&gt;

&lt;p&gt;There are some new features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A button for programming&lt;/li&gt;
  &lt;li&gt;A voltage reverence of 2048mV to the AREF pin of the XMEGA&lt;/li&gt;
  &lt;li&gt;Some &lt;strong&gt;Ferrite Chip Beads&lt;/strong&gt; and some small capacities at the IC VCC pins for steady working power&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And it has a much smaller footprint of a board size under 35x35mm! So most components have
the 0603 SMD package. This will be a challenge for the soldering I plan to do by hand.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;/articles/new_rev_b&quot;&gt;New Revision_B board ready&lt;/a&gt; was originally published by Christian at &lt;a href=&quot;&quot;&gt;spektel-sensor&lt;/a&gt; on November 23, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Adding Processing support]]></title>
  <link rel="alternate" type="text/html" href="/articles/Adding_Processing_Support" />
  <id>/articles/Adding_Processing_Support</id>
  <published>2014-11-02T00:00:00+01:00</published>
  <updated>2014-11-02T00:00:00+01:00</updated>
  <author>
    <name>Christian</name>
    <uri></uri>
    <email>git@cescholz.de</email>
  </author>
  <content type="html">&lt;h4 id=&quot;added-support-for-realtimeplotter-and-arduplot&quot;&gt;2014-11-02: Added support for RealtimePlotter and arduplot&lt;/h4&gt;
&lt;p&gt;I learned, that the main part on building a sensor is the software to grind and polish the
signals read from the hardware sensor. In this case it was the Allegro ACS758LCB-100U hall 
effect current sensor.&lt;/p&gt;

&lt;p&gt;So I read about digital filtering and use 3 cascaded the &lt;code&gt;Moving Average&lt;/code&gt; algorithm to smooth the
sensor reading.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; //filter use in main.c
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; AddToFloatAvg(&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;cur_filter1, (cur_mea_val));
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; AddToFloatAvg(&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;cur_filter2, GetOutputValue(&lt;span class=&quot;ni&quot;&gt;&amp;amp;cur_filter1));&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; AddToFloatAvg(&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;cur_filter3, GetOutputValue(&lt;span class=&quot;ni&quot;&gt;&amp;amp;cur_filter2));&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; cur_adc_res[act] = (GetOutputValue(&lt;span class=&quot;ni&quot;&gt;&amp;amp;cur_filter3));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Each filter has 9 readings. For details see &lt;code&gt;src/floating_average.h&lt;/code&gt; and &lt;code&gt;.c&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;By testing I used the DX9 transmitter, recorded to the SD card and read that using the TLM Reader.
This was a long procedure. Since I already put a header with the Rx, Tx serial pins on the
board it shouldn’t be that much of a problem to show some output on the Mac using the Processing
tools.&lt;/p&gt;

&lt;p&gt;I found two great serial monitors based on &lt;a href=&quot;https://www.processing.org/&quot;&gt;Processing&lt;/a&gt;.
Please see the &lt;a href=&quot;https://github.com/sebnil/RealtimePlotter.git&quot;&gt;RealtimePlotter&lt;/a&gt; and 
&lt;a href=&quot;https://github.com/dahart/arduplot.git&quot;&gt;Arduplot&lt;/a&gt;. Thanks to their contributors. Just uncomment
the lines in the &lt;code&gt;config/conf_board.h&lt;/code&gt; file.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/Adding_Processing_Support&quot;&gt;Adding Processing support&lt;/a&gt; was originally published by Christian at &lt;a href=&quot;&quot;&gt;spektel-sensor&lt;/a&gt; on November 02, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[First test flight]]></title>
  <link rel="alternate" type="text/html" href="/articles/test-flight-log" />
  <id>/articles/test-flight-log</id>
  <published>2014-10-29T00:00:00+01:00</published>
  <updated>2014-10-29T00:00:00+01:00</updated>
  <author>
    <name>Christian</name>
    <uri></uri>
    <email>git@cescholz.de</email>
  </author>
  <content type="html">&lt;p&gt;This was one of the first flights using the sensor in it’s target environment, the T-REX 500 RC
heli. I did a lot of bench testing using a light bulb up to 3A. But nor the bulb or the power
supply could have done much more. So this was the first test with more Amps.&lt;/p&gt;

&lt;p&gt;I’m using a Spektrum DX9 transmitter with SD card slot. I use the TLM Reader. Here is the result:&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/TREX500_20141026_REVA.png&quot; /&gt;
	&lt;figcaption&gt;T-REX 500 flight log&lt;/figcaption&gt;
&lt;/figure&gt;

  &lt;p&gt;&lt;a href=&quot;/articles/test-flight-log&quot;&gt;First test flight&lt;/a&gt; was originally published by Christian at &lt;a href=&quot;&quot;&gt;spektel-sensor&lt;/a&gt; on October 29, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Initial Upload]]></title>
  <link rel="alternate" type="text/html" href="/Initial%20upload" />
  <id>/Initial upload</id>
  <published>2014-10-28T00:00:00+01:00</published>
  <updated>2014-10-28T00:00:00+01:00</updated>
  <author>
    <name>Christian</name>
    <uri></uri>
    <email>git@cescholz.de</email>
  </author>
  <content type="html">&lt;p&gt;The prototype of the spektel-sensor passed its first successful tests. The revision A layout
and corresponding code is up on &lt;a href=&quot;https://github.com/csc13/spektel-sensor.git&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please be aware, that &lt;code&gt;REV_A&lt;/code&gt; had several faults on the board. So the Bosch BMP180 sensor
won’t work, because I didn’t read the datasheet correctly.&lt;/p&gt;

&lt;p&gt;After learning Eagle PCB, a software I can recommend to everybody, I spend some nights to
find the Eagle libraries for the parts I wanted to use and create the layout. At the end
I was little impatient to order the PCB (printed circuite board) at a board manufacturer.
I chose a little one, who did a great job etching and drilling the board.&lt;/p&gt;

&lt;p&gt;But I found several bugs in the layout. So I used a exacto hobby knife, some lacquered copper
wire and fixed it. As a mostly software guy I had to learn that a hardware bug can’t be fixed that
fast. And ordering a new board takes some days and money. so in the future I will print the board
layout on paper and go through all components and wires.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/Initial%20upload&quot;&gt;Initial Upload&lt;/a&gt; was originally published by Christian at &lt;a href=&quot;&quot;&gt;spektel-sensor&lt;/a&gt; on October 28, 2014.&lt;/p&gt;</content>
</entry>

</feed>